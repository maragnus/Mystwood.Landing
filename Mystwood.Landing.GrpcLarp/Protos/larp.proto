syntax = "proto3";

import "google/protobuf/timestamp.proto";

option csharp_namespace = "Mystwood.Landing.GrpcLarp";

package larp;

enum EventRsvp {
    NoAnswer = 0;
    No = 1;
    Maybe = 2; 
    Yes = 3;
    Confirmed = 4;
    Approved = 5;
}

message Event {
    int32 event_id = 1;
    string title = 2;
    string location = 3;
    string date = 4;
    string event_type = 5;
    repeated AccountAttendance attendees = 6;
}

message AccountAttendance {
    int32 account_id = 1;
    string name = 2;
    int32 moonstone = 3;
    EventRsvp rsvp = 4;
    repeated CharacterSummary characters = 5;
}

message AccountEmail {
    string email = 1;
    bool verified = 2;
}

message Account {
    int32 account_id = 1;
    string name = 2;
    string location = 3;
    repeated AccountEmail emails = 4;
    string phone = 5;
    bool is_admin = 6;
    repeated CharacterSummary characters = 7;
}

message Character {
    string character_id = 1;
    string live_json = 2;
    bool is_live = 3;
    string draft_json = 4;
    bool is_review = 5;
    string metadata = 6;
    int32 account_id = 7;
}

message CharacterSummary {
    int32 account_id = 1;
    string account_name = 2;
    string character_id = 3;
    string character_name = 4;
    string home_chapter = 5;
    string specialty = 6;
    int32 level = 7;
    bool is_live = 8;
    bool is_review = 9;
}

enum ValidationResponseCode {
    SUCCESS = 0;
    EXPIRED = 1;
    INVALID = 2;
}

service LarpAuthentication {
    rpc InitiateLogin(InitiateLoginRequest) returns (InitiateLoginResponse) {}
    rpc ConfirmLogin(ConfirmLoginRequest) returns (ConfirmLoginResponse) {}
}

service LarpAccount {
    rpc GetAccount(BasicRequest) returns (AccountResponse) {}
    
    rpc SetAccountName(UpdateAccountRequest) returns (AccountResponse) {}
    rpc SetAccountLocation(UpdateAccountRequest) returns (AccountResponse) {}
    rpc SetAccountPhone(UpdateAccountRequest) returns (AccountResponse) {}
    rpc AddAccountEmail(UpdateAccountRequest) returns (AccountResponse) {}
    rpc RemoveAccountEmail(UpdateAccountRequest) returns (AccountResponse) {}

    rpc GetCharacters(BasicRequest) returns (CharactersResponse) {}
    rpc GetCharacter(GetCharacterRequest) returns (CharacterResponse) {}
    rpc CreateCharacterDraft(CreateCharacterRequest) returns (CharacterResponse) {}
    rpc UpdateCharacterDraft(UpdateCharacterRequest) returns (CharacterResponse) {}
    rpc UpdateCharacterInReview(UpdateCharacterInReviewRequest) returns (CharacterResponse) {}

    rpc GetEvents(BasicRequest) returns (EventsResponse) {}
}

service LarpManage {
    rpc GetAccount(GetAccountRequest) returns (AccountResponse) {}
    rpc SearchAccounts(SearchAccountsRequest) returns (SearchAccountsResponse) {}
    rpc SetAdmin(SetAdminRequest) returns (AccountResponse) {}
    rpc SearchCharacters(SearchCharactersRequest) returns (SearchCharactersResponse) {} 
    rpc AddEvent(AddEventRequest) returns (EventResponse) {}
    rpc UpdateEvent(UpdateEventRequest) returns (EventResponse) {}
}

// Include this in any message that requires an authenticated session

message SessionIdentifier {
    string session_id = 1;
}

message BasicRequest {
    SessionIdentifier session = 1;
}

message AccountResponse {
    Account profile = 1;
}

// Requests and Responses

message InitiateLoginRequest {
    string email = 1;
}

message InitiateLoginResponse {
    ValidationResponseCode status_code = 1; 
    string message = 2;
}

message ConfirmLoginRequest {
    string email = 1;
    string code = 2;
}

message ConfirmLoginResponse {
    SessionIdentifier session = 1;
    ValidationResponseCode status_code = 2;
    string message = 3;
    Account profile = 4;
}

message UpdateAccountRequest {
    SessionIdentifier session = 1;
    string value = 2;
}

message CharactersResponse {
    repeated CharacterSummary characters = 1;
}

message CreateCharacterRequest {
    SessionIdentifier session = 1;
    string character_name = 2;
    string home_chapter = 3;
}

message UpdateCharacterRequest {
    SessionIdentifier session = 1;
    string character_id = 2;
    string draft_json = 3;
}

message UpdateCharacterInReviewRequest {
    SessionIdentifier session = 1;
    string character_id = 2;
    bool is_review = 3;
}

message GetCharacterRequest {
    SessionIdentifier session = 1;
    string character_id = 2;
}

message CharacterResponse {
    Character character = 1;
}

// Admin functions

message GetAccountRequest {
    SessionIdentifier session = 1;
    int32 account_id = 2;
}

message SearchAccountsRequest {
    SessionIdentifier session = 1;
    string query = 2;
}

message SearchAccountsResponse {
    repeated Account profiles = 1;
}

message SetAdminRequest {
    SessionIdentifier session = 1;
    int32 account_id = 2;
    bool is_admin = 3;
}

message SearchCharactersRequest {
    SessionIdentifier session = 1;
    string query = 2;
}

message SearchCharactersResponse {
    repeated CharacterSummary characters = 1;
}

// Events

message AddEventRequest {
    SessionIdentifier session = 1;
    Event event = 2;
}

message UpdateEventRequest {
    SessionIdentifier session = 1;
    int32 event_id = 2;
    Event event = 3;
}

message EventResponse {
    Event event = 1;
}

message EventsResponse {
    repeated Event events = 1;
}
